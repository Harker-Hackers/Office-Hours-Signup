<head>
    <%- include(`${base}/views/partials/head.ejs`, { title: "Calendar" }) %>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.0/main.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.5.0/socket.io.min.js"></script>
    <link href='https://cdn.jsdelivr.net/npm/fullcalendar@5.11.0/main.min.css' rel='stylesheet' />
    <style>
        form p {
            display: inline
        }
    </style>
</head>
<body>
    <%- include(`${base}/views/partials/teacher/topBar.ejs`, { active: "slots" }) %>
    <div class="ms-4 me-4">
        <div class="card">
            <div class="card-body">
                <div id="calendar"></div>
            </div>
        </div>
    </div>
  
    
    <%- include(`${base}/views/partials/modal/open.ejs`, { id: "prompt-popup" }) %>
        <div class="modal-header">
            <h5 class="w-100 text-center modal-title" id="prompt-popup-label">Create Slot</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
            <form>
                <p>Date: </p>
                <input id="prompt-date-input" type="text" disabled></input>
                <br><br>
                <p>Start: </p>
                <input id="prompt-start-input" type="time"></input>
                <br><br>
                <p>End: </p>
                <input id="prompt-end-input" type="time"></input>
            </form>
            <p id="prompt-error" class="text-danger text-center"></p>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button id="close-prompt-btn" type="button" class="btn btn-primary">Save</button>
        </div>
    <%- include(`${base}/views/partials/modal/close.ejs`) %>    

    <%- include(`${base}/views/partials/modal/open.ejs`, { id: "view-prompt-popup" }) %>
        <div class="modal-header">
            <h5 class="w-100 text-center modal-title" id="view-prompt-popup-label">View slot</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
            <form>
                <p>Date: </p>
                <input id="view-prompt-date-input" type="text" disabled></input>
                <br><br>
                <p>Start: </p>
                <input id="view-prompt-start-input" type="time" disabled></input>
                <br><br>
                <p>End: </p>
                <input id="view-prompt-end-input" type="time" disabled></input>
            </form>
            <hr>
            <p id="view-prompt-student-name" class="text-center">No student signed up</p>
            <p id="meeting-description"></p>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button id="delete-btn" type="button" class="btn btn-danger">Delete</button>
        </div>
    <%- include(`${base}/views/partials/modal/close.ejs`) %>    

    <script>
        const DEFAULT_SLOT_COLOR="#3A5AFF";
        const REMOVE_SLOT_COLOR="#FFADAD";
        const CREATE_SLOT_COLOR="#DDDDDD";
        const BOOKED_SLOT_COLOR="#00E304"
        const slots = <%- JSON.stringify(slots) %>;

        function toSQLDate(date) {
            return date.toISOString().slice(0,10);
        }

        function toSQLDateTime(date) {
            return date.toISOString().slice(0, 19).replace("T", " ");
        }

        function toSQLTime(date) {
            return date.toISOString().slice(10, 19).replace("T", "");
        }
        function isColliding(el1,el2){
            el1=el1.getBoundingClientRect();
            el2=el2.getBoundingClientRect();
            return !(el1.top>=el2.bottom||el1.bottom<=el2.top||el1.left>=el2.right||el1.right<=el2.left);
        }
        function isEventColliding(ev1,ev2){
            if(ev2.start<=ev1.end&&ev2.end>=ev1.start&&ev1.col==ev2.col){
                console.log("COLLISION");
                console.log(ev1.name+" "+ev1.start+" "+ev1.end+" "+ev1.col);
                console.log(ev2.name+" "+ev2.start+" "+ev2.end+" "+ev2.col);
                return true;
            }
        }
        function mergeEventContainers(evl1,evl2){
            
        }
        function splitEvent(el,elems){
            let uid=0;
            elems = elems.map(elem=>{
                let boundingBox=k.getBoundingClientRect();
                return {
                    start:boundingBox.top,
                    end:boundingBox.bottom,
                    column:boundingBox.left,
                    el:elem
            }})
            
        }
        function splitAndShiftEvents(){
            elems=[...document.querySelectorAll(".fc-bg-event")];
            let evls=splitEvent(elems);
            evls.forEach(evl=>{
                if(evl.elems.size>1)
                {
                    let col=0;
                    console.log(evl.elems.size);
                    evl.elems.forEach((v,k)=>{
                        shiftEventElement(v,evl.elems.size,col++);
                    })
                }
            })
        }
        function shiftEventElement(el,totcols,myleft,myright){
            myright=myright||myleft+1;
            el.style.width=100*(myright-myleft)/totcols+"%";
            el.style.left=100*(myleft)/totcols+"%";
        }
        function readCookie(name) {
            var nameEQ = name + "=";
            var ca = document.cookie.split(';');
            for(var i=0;i < ca.length;i++) {
                var c = ca[i];
                while (c.charAt(0)==' ') c = c.substring(1,c.length);
                if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
            }
            return null;
        }
        async function getDaySchedule(d){
            let r = await fetch("https://bell.dev.harker.org/api/schedule?"+new URLSearchParams({month:d.getMonth()+1,year:d.getFullYear(),day:d.getDate()}), {
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded"
                },
                method: "GET"
            })
            try{
                let response = await r.json();
                return response;
            } catch(err){return false}
        }
        async function createSlot(slot) {
            slot = {date: "", startTime: "", endTime: "", ...slot};
            let ev = calendar.addEvent({start: slot.date + "T" + slot.startTime, end: slot.date + "T" + slot.endTime,
                title: "",
                data: slot,
                backgroundColor: CREATE_SLOT_COLOR,
                borderColor: CREATE_SLOT_COLOR,
                display: "block"
            });
            try {
                let r = await fetch("/api/create_slot", {
                    method: "POST",
                    headers: {
                        "Accept": "application/json",
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({"date": slot.date, "startTime": slot.startTime + ":00", "endTime": slot.endTime + ":00"})
                });
                let res = await r.json();
                ev.remove();
                if(res.success){
                    createSlotEvent(res.slot);
                } else {
                    throw res;
                }  
            } catch(err) {
                ev.remove();
                throw err;
            }
        }
        async function deleteSlot(id, ev) {
            ev.setProp("backgroundColor", REMOVE_SLOT_COLOR)
            ev.setProp("borderColor", REMOVE_SLOT_COLOR)
            try {
                let r = await fetch("/api/delete_slot", {
                    method: "POST",
                    headers: {
                        "Accept":"application/json",
                        "Content-Type":"application/json"
                    },
                    body: JSON.stringify({id: id})
                });
                let success = await r.json()
                if(success.success) {
                    ev.remove();
                } else {
                    throw new Error("An error occured.");
                }
            } catch(err){
                ev.setProp("backgroundColor", DEFAULT_SLOT_COLOR);
                ev.setProp("borderColor", DEFAULT_SLOT_COLOR);
                return;
            }
        }
        function createSlotEvent(slot) {
            let col=slot.student_email?BOOKED_SLOT_COLOR:DEFAULT_SLOT_COLOR
            return calendar.addEvent({start: slot.date + "T" + slot.startTime, end: slot.date + "T" + slot.endTime,
                title: "Meeting", 
                slot_id: slot._id,
                backgroundColor: col,
                borderColor: col,
                display: "block",
                data: slot
            });
        }
        function updateSlotEvent(slot,data) {
            calendar.getEvents().forEach(k=>{
                k.extendedProps.slot_id==slot&&(k.setExtendedProp("data",{...k.extendedProps.data,...data}),redisplayEvent(k))
            })
        }
        function mulberry32(a) {
            return function() {
            var t = a += 0x6D2B79F5;
            t = Math.imul(t ^ t >>> 15, t | 1);
            t ^= t + Math.imul(t ^ t >>> 7, t | 61);
            return ((t ^ t >>> 14) >>> 0) / 4294967296;
            }
        }
        String.prototype.toHSL = function(opts) {
            var h, s, l;
            opts = opts || {};
            opts.hue = opts.hue || [0, 360];
            opts.sat = opts.sat || [99, 100];
            opts.lit = opts.lit || [49, 51];

            var range = function(hash, min, max) {
                var diff = max - min;
                var x = ((hash % diff) + diff) % diff;
                return x + min;
            }

            var hash = 0;
            if (this.length === 0) return hash;
            for (var i = 0; i < this.length; i++) {
                hash += this.charCodeAt(i) + ((hash << 5) - hash)+mulberry32(this.charCodeAt(i)+i+this.length)();
                hash&hash;
            }
            h = range(hash, opts.hue[0], opts.hue[1]);
            s = range(hash+mulberry32(432)(), opts.sat[0], opts.sat[1]);
            l = range(hash+mulberry32(143)(), opts.lit[0], opts.lit[1]);

            return `hsl(${h}, ${s}%, ${l}%)`;
        }
        function redisplayEvent(ev) {
            let data=ev.extendedProps.data,col=data.student_email?BOOKED_SLOT_COLOR:DEFAULT_SLOT_COLOR;
            ev.setProp("backgroundColor",col);
            ev.setProp("borderColor",col);
        }
        const daysWithBackgroundEvents=new Set();
        async function createBackgroundEventsForDay(day){
            let key=day.toLocaleDateString('en-us');
            if(!daysWithBackgroundEvents.has(key)){
                let resp = await getDaySchedule(day);
                if(!resp)
                    return;       
                else
                {
                    daysWithBackgroundEvents.add(key);
                    resp.schedule.forEach(k=>{
                        let s=new Date(k.start.slice(0,-1));
                        let e=new Date(k.end.slice(0,-1));
                        calendar.addEvent({
                            start:s,
                            end:e,
                            display:"background",
                            name:k.name+Math.random(),
                            color:k.name=="Office Hours"?"rgb(0,255,0)":(Math.random()*1000000+[]).toHSL(),
                            textColor:"#000000",
                            title:k.name,
                            popup:{
                                html:`
                                <div style="background-color:rgb(250,250,200);">
                                    <b>${k.name}</b>
                                    <p style="font-size:10px;">${s.toLocaleTimeString('en-us')} - ${e.toLocaleTimeString('en-us')}</p>
                                </div>`
                            }
                        })
                    })
                }    
            }
        }
        document.addEventListener("DOMContentLoaded", function() {
            var calendarEl = document.getElementById("calendar");
            window.calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: "dayGridMonth",
                headerToolbar: {
                    left: "prev,next today",
                    center: "title",
                    right: "dayGridMonth,timeGridWeek,timeGridDay"
                },
                eventClick: (info) => {
                    window.info = info;
                    $("#view-prompt-date-input").val(info.event.extendedProps.data.date);
                    $("#view-prompt-start-input").val(info.event.extendedProps.data.startTime);
                    $("#view-prompt-end-input").val(info.event.extendedProps.data.endTime);
                    $("#view-prompt-student-name").html(info.event.extendedProps.data.student_email ? `<b>Attendee</b>: ${info.event.extendedProps.data.student_email}` : "No student signed up");
                    $("#meeting-description").html(info.event.extendedProps.data.description ? `<b>Description</b>: ${info.event.extendedProps.data.description}` : "");
                    $("#view-prompt-popup").modal("show");
                },
                eventMouseEnter: (info)=>{
                    let ev=info.event;
                    let elem=info.el;
                    if(ev.extendedProps.popup){
                        let offset=elem.getBoundingClientRect();
                        let tooltip = document.createElement("div");
                        tooltip.id="bgevent_tooltip_"+ev.extendedProps.name;
                        tooltip.className="bgevent_tooltip"
                        tooltip.style.top=offset.top+scrollY-40+"px";
                        tooltip.style.left=offset.left+scrollX+"px";
                        tooltip.style.height="0px";
                        tooltip.style.position="absolute";
                        tooltip.style.zIndex="1000";
                        tooltip.innerHTML=ev.extendedProps.popup.html;
                        document.body.appendChild(tooltip);
                    }
                },
                eventMouseLeave: (info)=>{
                    let ev=info.event;
                    try{
                        document.getElementById("bgevent_tooltip_"+ev.extendedProps.name).remove();
                    }catch(err){}
                },
                dateClick: (info) => {
                    window.info = info;
                    $("#prompt-error").html("");
                    $("#prompt-date-input").val(toSQLDate(info.date));
                    $("#prompt-popup").modal("show");
                },
                datesSet: async (r)=>{
                    console.log(r);
                    if(!(r.view.type=='timeGridDay'||r.view.type=='timeGridWeek'))
                        return;
                    for(let d=r.start;d<r.end;d.setDate(d.getDate()+1))
                    {
                        createBackgroundEventsForDay(d)
                    }
                },
                eventAfterAllRender: (r)=>{
                    fixRecurringEventCollision();
                },
            });
            let slot;
            for(let i = 0; i < slots.length; i++) {
                createSlotEvent(slots[i]);
            }
            calendar.render();
        });

        document.getElementById("close-prompt-btn").addEventListener("click", () => {
            if (!$("#prompt-end-input").val() || !$("#prompt-start-input").val() || !$("#prompt-date-input").val()) {
                $("#prompt-error").html("Please fill out all fields.");
            } else if (parseInt($("#prompt-end-input").val().replace(":", "")) <= parseInt($("#prompt-start-input").val().replace(":", ""))) {
                $("#prompt-error").html("Start time must come before end time.");
            } else {
                try {
                    createSlot({
                        date: $("#prompt-date-input").val(),
                        startTime: $("#prompt-start-input").val(),
                        endTime: $("#prompt-end-input").val()
                    });
                    $("#prompt-popup").modal("hide");
                } catch (err) {
                    $("#prompt-error").html("An error occured.")
                }
            }
        });

        document.getElementById("delete-btn").addEventListener("click", () => {
            info = window.info;
            $("#view-prompt-popup").modal("hide");
            deleteSlot(info.event.extendedProps.slot_id, info.event);
        });
        const socket = io("/update");
        socket.on("connect",()=>{
            socket.emit('auth',readCookie("jwt"));
            socket.on("meeting_change",function(d){
                updateSlotEvent(d.slot_id,d.data)
            });
        })
    </script>
</body>