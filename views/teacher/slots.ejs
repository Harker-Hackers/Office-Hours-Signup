<head>
    <%- include(`${base}/views/partials/head.ejs`, { title: "Calendar" }) %>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.0/main.min.js"></script>
    <link href='https://cdn.jsdelivr.net/npm/fullcalendar@5.11.0/main.min.css' rel='stylesheet' />
    <style>
        form p {
            display: inline
        }
    </style>
</head>
<body>
    <%- include(`${base}/views/partials/teacher/topBar.ejs`, { active: "slots" }) %>
    <div class="ms-4 me-4">
        <div class="card">
            <div class="card-body">
                <div id="calendar"></div>
            </div>
        </div>
    </div>
  
    
    <%- include(`${base}/views/partials/modal/open.ejs`, { id: "prompt-popup" }) %>
        <div class="modal-header">
            <h5 class="w-100 text-center modal-title" id="prompt-popup-label">Create Slot</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
            <form>
                <p>Date: </p>
                <input id="prompt-date-input" type="text" disabled></input>
                <br><br>
                <p>Start: </p>
                <input id="prompt-start-input" type="time"></input>
                <br><br>
                <p>End: </p>
                <input id="prompt-end-input" type="time"></input>
            </form>
            <p id="prompt-error" class="text-danger text-center"></p>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button id="close-prompt-btn" type="button" class="btn btn-primary">Save</button>
        </div>
    <%- include(`${base}/views/partials/modal/close.ejs`) %>    

    <%- include(`${base}/views/partials/modal/open.ejs`, { id: "view-prompt-popup" }) %>
        <div class="modal-header">
            <h5 class="w-100 text-center modal-title" id="view-prompt-popup-label">View slot</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
            <form>
                <p>Date: </p>
                <input id="view-prompt-date-input" type="text" disabled></input>
                <br><br>
                <p>Start: </p>
                <input id="view-prompt-start-input" type="time" disabled></input>
                <br><br>
                <p>End: </p>
                <input id="view-prompt-end-input" type="time" disabled></input>
            </form>
            <hr>
            <p id="view-prompt-student-name" class="text-center">No student signed up</p>
            <p id="meeting-description"></p>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button id="delete-btn" type="button" class="btn btn-danger">Delete</button>
        </div>
    <%- include(`${base}/views/partials/modal/close.ejs`) %>    

    <script>
        const DEFAULT_SLOT_COLOR="#3A5AFF";
        const REMOVE_SLOT_COLOR="#FFADAD";
        const CREATE_SLOT_COLOR="#DDDDDD";
        slots = <%- JSON.stringify(slots) %>;

        function toSQLDate(date) {
            return date.toISOString().slice(0,10);
        }

        function toSQLDateTime(date) {
            return date.toISOString().slice(0, 19).replace("T", " ");
        }

        function toSQLTime(date) {
            return date.toISOString().slice(10, 19).replace("T", "");
        }
        async function createSlot(slot) {
            slot = {date: "", startTime: "", endTime: "", ...slot};
            let ev = calendar.addEvent({start: slot.date + "T" + slot.startTime, end: slot.date + "T" + slot.endTime,
                title: "Meeting",
                data: slot,
                backgroundColor: CREATE_SLOT_COLOR,
                borderColor: CREATE_SLOT_COLOR,
                display: "block"
            });
            try {
                let r = await fetch("/api/create_slot", {
                    method: "POST",
                    headers: {
                        "Accept": "application/json",
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({"date": slot.date, "startTime": slot.startTime + ":00", "endTime": slot.endTime + ":00"})
                });
                let res = await r.json();
                ev.remove();
                if(res.success){
                    createSlotEvent(res.slot);
                } else {
                    throw res;
                }  
            } catch(err) {
                ev.remove();
                throw err;
            }
        }
        async function deleteSlot(id, ev) {
            ev.setProp("backgroundColor", REMOVE_SLOT_COLOR)
            ev.setProp("borderColor", REMOVE_SLOT_COLOR)
            try {
                let r = await fetch("/api/delete_slot", {
                    method: "POST",
                    headers: {
                        "Accept":"application/json",
                        "Content-Type":"application/json"
                    },
                    body: JSON.stringify({id: id})
                });
                let success = await r.json()
                if(success.success) {
                    ev.remove();
                } else {
                    throw new Error("An error occured.");
                }
            } catch(err){
                ev.setProp("backgroundColor", DEFAULT_SLOT_COLOR);
                ev.setProp("borderColor", DEFAULT_SLOT_COLOR);
                return;
            }
        }
        function createSlotEvent(slot) {
            return calendar.addEvent({start: slot.date + "T" + slot.startTime, end: slot.date + "T" + slot.endTime,
                title: "Meeting", 
                slot_id: slot._id,
                backgroundColor: DEFAULT_SLOT_COLOR,
                display: "block",
                data: slot
            });
        }
        document.addEventListener("DOMContentLoaded", function() {
            var calendarEl = document.getElementById("calendar");
            window.calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: "dayGridMonth",
                headerToolbar: {
                    left: "prev,next today",
                    center: "title",
                    right: "dayGridMonth,timeGridWeek,timeGridDay"
                },
                eventClick: (info) => {
                    window.info = info;
                    $("#view-prompt-date-input").val(info.event.extendedProps.data.date);
                    $("#view-prompt-start-input").val(info.event.extendedProps.data.startTime);
                    $("#view-prompt-end-input").val(info.event.extendedProps.data.endTime);
                    $("#view-prompt-student-name").html(info.event.extendedProps.data.student_email ? `<b>Attendee</b>: ${info.event.extendedProps.data.student_email}` : "No student signed up");
                    $("#meeting-description").html(info.event.extendedProps.data.description ? `<b>Description</b>: ${info.event.extendedProps.data.description}` : "");
                    $("#view-prompt-popup").modal("show");
                },
                dateClick: (info) => {
                    window.info = info;
                    $("#prompt-error").html("");
                    $("#prompt-date-input").val(toSQLDate(info.date));
                    $("#prompt-popup").modal("show");
                }
            });
            let slot;
            for(let i = 0; i < slots.length; i++) {
                createSlotEvent(slots[i]);
            }
            calendar.render();
        });

        document.getElementById("close-prompt-btn").addEventListener("click", () => {
            if (!$("#prompt-end-input").val() || !$("#prompt-start-input").val() || !$("#prompt-date-input").val()) {
                $("#prompt-error").html("Please fill out all fields.");
            } else if (parseInt($("#prompt-end-input").val().replace(":", "")) <= parseInt($("#prompt-start-input").val().replace(":", ""))) {
                $("#prompt-error").html("Start time must come before end time.");
            } else {
                try {
                    createSlot({
                        date: $("#prompt-date-input").val(),
                        startTime: $("#prompt-start-input").val(),
                        endTime: $("#prompt-end-input").val()
                    });
                    $("#prompt-popup").modal("hide");
                } catch (err) {
                    $("#prompt-error").html("An error occured.")
                }
            }
        });

        document.getElementById("delete-btn").addEventListener("click", () => {
            info = window.info;
            $("#view-prompt-popup").modal("hide");
            deleteSlot(info.event.extendedProps.slot_id, info.event);
        });
    </script>
</body>